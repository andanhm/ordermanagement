// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.23.0
// 	protoc        v3.13.0
// source: grpc/proto/order/order.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Status int32

const (
	Status_PENDING Status = 0
	Status_SUCCESS Status = 1
	Status_FAILED  Status = 2
)

// Enum value maps for Status.
var (
	Status_name = map[int32]string{
		0: "PENDING",
		1: "SUCCESS",
		2: "FAILED",
	}
	Status_value = map[string]int32{
		"PENDING": 0,
		"SUCCESS": 1,
		"FAILED":  2,
	}
)

func (x Status) Enum() *Status {
	p := new(Status)
	*p = x
	return p
}

func (x Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Status) Descriptor() protoreflect.EnumDescriptor {
	return file_grpc_proto_order_order_proto_enumTypes[0].Descriptor()
}

func (Status) Type() protoreflect.EnumType {
	return &file_grpc_proto_order_order_proto_enumTypes[0]
}

func (x Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Status.Descriptor instead.
func (Status) EnumDescriptor() ([]byte, []int) {
	return file_grpc_proto_order_order_proto_rawDescGZIP(), []int{0}
}

// Response represent health status of the application
type Details struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	CustomerID int64  `protobuf:"varint,2,opt,name=customerID,proto3" json:"customerID,omitempty"`
	Amount     int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Status     Status `protobuf:"varint,4,opt,name=status,proto3,enum=anglebroking.stock.order.v1.Status" json:"status,omitempty"`
}

func (x *Details) Reset() {
	*x = Details{}
	if protoimpl.UnsafeEnabled {
		mi := &file_grpc_proto_order_order_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Details) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Details) ProtoMessage() {}

func (x *Details) ProtoReflect() protoreflect.Message {
	mi := &file_grpc_proto_order_order_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Details.ProtoReflect.Descriptor instead.
func (*Details) Descriptor() ([]byte, []int) {
	return file_grpc_proto_order_order_proto_rawDescGZIP(), []int{0}
}

func (x *Details) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Details) GetCustomerID() int64 {
	if x != nil {
		return x.CustomerID
	}
	return 0
}

func (x *Details) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Details) GetStatus() Status {
	if x != nil {
		return x.Status
	}
	return Status_PENDING
}

var File_grpc_proto_order_order_proto protoreflect.FileDescriptor

var file_grpc_proto_order_order_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x6f, 0x72, 0x64,
	0x65, 0x72, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b,
	0x61, 0x6e, 0x67, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x6f,
	0x63, 0x6b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x22, 0x8e, 0x01, 0x0a, 0x07,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x75, 0x73, 0x74, 0x6f,
	0x6d, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x75, 0x73,
	0x74, 0x6f, 0x6d, 0x65, 0x72, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x3b, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x23, 0x2e, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x2e, 0x0a, 0x06,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e,
	0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01,
	0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x02, 0x32, 0x8f, 0x02, 0x0a,
	0x05, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x56, 0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x12, 0x24, 0x2e, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x24, 0x2e, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x62, 0x72,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x56,
	0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x2e, 0x61, 0x6e, 0x67, 0x6c, 0x65,
	0x62, 0x72, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x24,
	0x2e, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74,
	0x6f, 0x63, 0x6b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x12, 0x56, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x2e, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e,
	0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x1a, 0x24, 0x2e, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x62, 0x72,
	0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2e, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x6f, 0x72, 0x64, 0x65,
	0x72, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x22, 0x00, 0x42, 0x1d,
	0x5a, 0x1b, 0x61, 0x6e, 0x67, 0x6c, 0x65, 0x62, 0x72, 0x6f, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x2f, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2f, 0x76, 0x31, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_grpc_proto_order_order_proto_rawDescOnce sync.Once
	file_grpc_proto_order_order_proto_rawDescData = file_grpc_proto_order_order_proto_rawDesc
)

func file_grpc_proto_order_order_proto_rawDescGZIP() []byte {
	file_grpc_proto_order_order_proto_rawDescOnce.Do(func() {
		file_grpc_proto_order_order_proto_rawDescData = protoimpl.X.CompressGZIP(file_grpc_proto_order_order_proto_rawDescData)
	})
	return file_grpc_proto_order_order_proto_rawDescData
}

var file_grpc_proto_order_order_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_grpc_proto_order_order_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_grpc_proto_order_order_proto_goTypes = []interface{}{
	(Status)(0),     // 0: anglebroking.stock.order.v1.Status
	(*Details)(nil), // 1: anglebroking.stock.order.v1.Details
}
var file_grpc_proto_order_order_proto_depIdxs = []int32{
	0, // 0: anglebroking.stock.order.v1.Details.status:type_name -> anglebroking.stock.order.v1.Status
	1, // 1: anglebroking.stock.order.v1.Order.Create:input_type -> anglebroking.stock.order.v1.Details
	1, // 2: anglebroking.stock.order.v1.Order.Update:input_type -> anglebroking.stock.order.v1.Details
	1, // 3: anglebroking.stock.order.v1.Order.Status:input_type -> anglebroking.stock.order.v1.Details
	1, // 4: anglebroking.stock.order.v1.Order.Create:output_type -> anglebroking.stock.order.v1.Details
	1, // 5: anglebroking.stock.order.v1.Order.Update:output_type -> anglebroking.stock.order.v1.Details
	1, // 6: anglebroking.stock.order.v1.Order.Status:output_type -> anglebroking.stock.order.v1.Details
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_grpc_proto_order_order_proto_init() }
func file_grpc_proto_order_order_proto_init() {
	if File_grpc_proto_order_order_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_grpc_proto_order_order_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Details); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_grpc_proto_order_order_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_grpc_proto_order_order_proto_goTypes,
		DependencyIndexes: file_grpc_proto_order_order_proto_depIdxs,
		EnumInfos:         file_grpc_proto_order_order_proto_enumTypes,
		MessageInfos:      file_grpc_proto_order_order_proto_msgTypes,
	}.Build()
	File_grpc_proto_order_order_proto = out.File
	file_grpc_proto_order_order_proto_rawDesc = nil
	file_grpc_proto_order_order_proto_goTypes = nil
	file_grpc_proto_order_order_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// OrderClient is the client API for Order service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type OrderClient interface {
	// Create service — a method similar to a ping that reports whether the service is up or down.
	Create(ctx context.Context, in *Details, opts ...grpc.CallOption) (*Details, error)
	// Create service — a method similar to a ping that reports whether the service is up or down.
	Update(ctx context.Context, in *Details, opts ...grpc.CallOption) (*Details, error)
	// Create service — a method similar to a ping that reports whether the service is up or down.
	Status(ctx context.Context, in *Details, opts ...grpc.CallOption) (*Details, error)
}

type orderClient struct {
	cc grpc.ClientConnInterface
}

func NewOrderClient(cc grpc.ClientConnInterface) OrderClient {
	return &orderClient{cc}
}

func (c *orderClient) Create(ctx context.Context, in *Details, opts ...grpc.CallOption) (*Details, error) {
	out := new(Details)
	err := c.cc.Invoke(ctx, "/anglebroking.stock.order.v1.Order/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Update(ctx context.Context, in *Details, opts ...grpc.CallOption) (*Details, error) {
	out := new(Details)
	err := c.cc.Invoke(ctx, "/anglebroking.stock.order.v1.Order/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *orderClient) Status(ctx context.Context, in *Details, opts ...grpc.CallOption) (*Details, error) {
	out := new(Details)
	err := c.cc.Invoke(ctx, "/anglebroking.stock.order.v1.Order/Status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OrderServer is the server API for Order service.
type OrderServer interface {
	// Create service — a method similar to a ping that reports whether the service is up or down.
	Create(context.Context, *Details) (*Details, error)
	// Create service — a method similar to a ping that reports whether the service is up or down.
	Update(context.Context, *Details) (*Details, error)
	// Create service — a method similar to a ping that reports whether the service is up or down.
	Status(context.Context, *Details) (*Details, error)
}

// UnimplementedOrderServer can be embedded to have forward compatible implementations.
type UnimplementedOrderServer struct {
}

func (*UnimplementedOrderServer) Create(context.Context, *Details) (*Details, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (*UnimplementedOrderServer) Update(context.Context, *Details) (*Details, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (*UnimplementedOrderServer) Status(context.Context, *Details) (*Details, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}

func RegisterOrderServer(s *grpc.Server, srv OrderServer) {
	s.RegisterService(&_Order_serviceDesc, srv)
}

func _Order_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Details)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anglebroking.stock.order.v1.Order/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Create(ctx, req.(*Details))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Details)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anglebroking.stock.order.v1.Order/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Update(ctx, req.(*Details))
	}
	return interceptor(ctx, in, info, handler)
}

func _Order_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Details)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OrderServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/anglebroking.stock.order.v1.Order/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OrderServer).Status(ctx, req.(*Details))
	}
	return interceptor(ctx, in, info, handler)
}

var _Order_serviceDesc = grpc.ServiceDesc{
	ServiceName: "anglebroking.stock.order.v1.Order",
	HandlerType: (*OrderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Order_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _Order_Update_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _Order_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/proto/order/order.proto",
}
